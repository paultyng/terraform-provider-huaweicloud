// Generated by PMS #215
package css

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCssClusterLogs() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCssClusterLogsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the cluster.`,
			},
			"instance_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the node name.`,
			},
			"log_type": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the log type.`,
			},
			"level": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the log level.`,
			},
			"logs": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The log list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"level": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The log level.`,
						},
						"date": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The log date.`,
						},
						"content": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The log content.`,
						},
					},
				},
			},
		},
	}
}

type ClusterLogsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newClusterLogsDSWrapper(d *schema.ResourceData, meta interface{}) *ClusterLogsDSWrapper {
	return &ClusterLogsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCssClusterLogsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newClusterLogsDSWrapper(d, meta)
	showLogBackupRst, err := wrapper.ShowLogBackup()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showLogBackupToSchema(showLogBackupRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CSS POST /v1.0/{project_id}/clusters/{cluster_id}/logs/search
func (w *ClusterLogsDSWrapper) ShowLogBackup() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "css")
	if err != nil {
		return nil, err
	}

	uri := "/v1.0/{project_id}/clusters/{cluster_id}/logs/search"
	uri = strings.ReplaceAll(uri, "{cluster_id}", w.Get("cluster_id").(string))
	params := map[string]any{
		"instanceName": w.Get("instance_name"),
		"level":        w.Get("level"),
		"logType":      w.Get("log_type"),
		"limit":        100,
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("POST").
		URI(uri).
		Body(params).
		OkCode(200).
		Request().
		Result()
}

func (w *ClusterLogsDSWrapper) showLogBackupToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("logs", schemas.SliceToList(body.Get("logList"),
			func(logs gjson.Result) any {
				return map[string]any{
					"level":   logs.Get("level").Value(),
					"date":    logs.Get("date").Value(),
					"content": logs.Get("content").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
